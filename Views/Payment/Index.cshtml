@model IEnumerable<ComprovAI.Models.PaymentModeModel>

@{
    ViewData["Title"] = "Lançamentos";
}

<div class="card shadow-sm p-4 mt-4">
    <div class="row">
        <div class="col-md-6 border-end pe-4">
            <h1>Comprovantes</h1>
        
            <form id="addPaymentForm">
                <div class="mb-2">
                    <label>Valor</label>
                    <input type="number" step="0.01" name="Value" class="form-control" required />
                </div>
                <div class="mb-2">
                    <label>Tipo</label>
                    <select name="Type" class="form-control" required>
                        <option value="">Selecione...</option>
                        <option value="3">Pix</option>
                        <option value="2">Crédito</option>
                        <option value="1">Débito</option>
                    </select> 
                </div>
                <div class="mb-2">
                    <label>Bandeira</label>
                    <select name="CardBrand" class="form-control" required>
                        <option value="">Selecione...</option>
                        <option value="2">Visa</option>
                        <option value="1">Mastercard</option>
                        <option value="3">Elo</option>
                        <option value="4">Amex</option>
                    </select> 
                </div>
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-success">Adicionar Pagamento</button>
            </form>
            <div id="result"></div>
        </div>

        <div class="col-md-6 ps-4">
            <div class="card mb-2">
                <h1 class="px-2 text-center"> Total </h1>
                <h1 class="text-center  "><span class="badge  bg-primary text-light">@ViewBag.TotalPayments.ToString("C")</span></h1>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Valor</th>
                        <th>Tipo</th>
                        <th>Bandeira</th>
                        <th>Ações</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Value.ToString("C")</td>
                            <td>@item.Type</td>
                            <td>@item.CardBrand</td>
                            <td>
                                <button class="btn btn-sm btn-danger btn-delete"
                                        data-id="@item.Id"
                                        data-type="@((int)item.Type)">
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>

                    <thead>
                    <tr>
                        <th>Total</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>@ViewBag.TotalPayments.ToString("C")</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    const typeInput = document.querySelector('select[name="Type"]');
    const cardBrandInput = document.querySelector('select[name="CardBrand"]');
    const antiforgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;    
    
    typeInput.addEventListener('input', function() {
        if (this.value === '3') { // '3' representa Pix
            cardBrandInput.disabled = true;
            cardBrandInput.value = '';
            } else {
            cardBrandInput.disabled = false;
        }
        });
    
    document.getElementById('addPaymentForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const form = e.target;
    
    let cardBrandValue = form.CardBrand.value;
    if (cardBrandValue === '') {
        cardBrandValue = null;
    } else {
        // CORREÇÃO: Converte a string numérica para número inteiro
        cardBrandValue = parseInt(cardBrandValue, 10);
    }
    
    const data = {
    Value: parseFloat(form.Value.value),
    Type: parseInt(form.Type.value, 10),
    CardBrand: cardBrandValue // Pode ser null ou um número inteiro
    };
        console.log("JSON Prestes a ser enviado:", JSON.stringify(data));

    const response = await fetch('/Payment/AddPayment', {
    method: 'POST',
    headers: { 
        'Content-Type': 'application/json',
        'RequestVerificationToken' : antiforgeryToken
    },
    body: JSON.stringify(data)
    });

    if (response.ok) {
    document.getElementById('result').innerText = 'Pagamento adicionado com sucesso!';
    form.reset(); // Limpa o formulário
        cardBrandInput.disabled = false; // Reabilita o  campo após o reset
    } else {
    document.getElementById('result').innerText = 'Erro ao adicionar pagamento.';
    }
    });
    </script>
} 