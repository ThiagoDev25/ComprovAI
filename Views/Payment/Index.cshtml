@model IEnumerable<ComprovAI.Models.PaymentModeModel>

@{
    ViewData["Title"] = "Lançamentos";
}
<div id="payment-app">
<div class="card shadow-sm p-4 mt-4">
    <div class="row">
        <div class="col-md-6 border-end pe-4">
            <h1>Comprovantes</h1>
        
            <form id="addPaymentForm">
                <div class="mb-2">
                    <label>Valor</label>
                    <input type="number" step="0.01" name="Value" class="form-control" required />
                </div>
                <div class="mb-2">
                    <label>Tipo</label>
                    <select name="Type" class="form-control" required>
                        <option value="">Selecione...</option>
                        <option value="3">Pix</option>
                        <option value="2">Crédito</option>
                        <option value="1">Débito</option>
                    </select> 
                </div>
                <div class="mb-2">
                    <label>Bandeira</label>
                    <select name="CardBrand" class="form-control" required>
                        <option value="">Selecione...</option>
                        <option value="2">Visa</option>
                        <option value="1">Mastercard</option>
                        <option value="3">Elo</option>
                        <option value="4">Amex</option>
                    </select> 
                </div>
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-success">Adicionar Pagamento</button>
            </form>
            <div id="result"></div>
        </div>

        <div class="col-md-6 ps-4">
            <div class="card mb-2">
                <h1 class="px-2 text-center"> Total </h1>
                <h1 class="text-center  "><span class="badge  bg-primary text-light">@ViewBag.TotalPayments.ToString("C")</span></h1>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Valor</th>
                        <th>Tipo</th>
                        <th>Bandeira</th>
                        <th>Ações</th>
                    </tr>
                    </thead>
                    <tbody id="paymentsTableBody">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Value.ToString("C")</td>
                            <td>@item.Type</td>
                            <td>@item.CardBrand</td>
                            <td>
                                <button class="btn btn-sm btn-danger btn-delete"
                                        data-id="@item.Id"
                                        data-type="@((int)item.Type)">
                                    Excluir
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>

                    <thead>
                    <tr>
                        <th>Total</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>@ViewBag.TotalPayments.ToString("C")</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    // usamos o Json.Serialize para pegar a lista inicial que o C# passou para a View
                    payments: @Json.Serialize(Model),
                    
                    // um objeto para armazenar os dados do novo pagamento
                    newPayment: {
                        Value: null,
                        Type: '',
                        CardBrand: '',
                        
                    },
                    antiForgeryToken: document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            },
            
            computed: {
                // esta função será executada automaticamente quando 'payments' mudar
                totalAmount() {
                    const total = this.payments.reduce((sum, payment) => sum + payment.value, 0);
                    return total.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL' });
                },
                
                // esta propriedade nos diz se o campo da bandeira deve estar desabilitado
                isCardBrandDisabled() {
                    // se o tipo for Pix (3), desabilita a bandeira
                    return this.newPayment.Type === 3;
                }
            },
            
            methods: {
                // método para adicionar um novo pagamento
                async addPayment() {
                    // 1. Monta o objeto de dados para enviar, convertendo os tipos.
                    const dataToSend = {
                        value: parseFloat(this.newPayment.Value),
                        Type:  parseFloat(this.newPayment.Type),
                        CardBrand: this.isCardBrandDisabled ? null : parseInt(this.newPayment.CardBrand) // se for Pix, envia null.
                    };
                    // 2. Faz a requisição POST para o servidor e envia os dados.
                    const response = await fetch('/Payment/AddPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': this.antiforgeryToken
                        },
                        body: JSON.stringify(dataToSend)
                    });
                    
                    if (response.ok) {
                        const result = await response.json();
                        
                        // 3. O Vue irá automaticamente atualizar a tabela e o total na tela.
                        this.payments.unshift(result.newPayment);
                        
                        // 4. Limpa o objeto do formulário, o que limpa os campos.
                        this.newPayment = { Value: null, Type: '', CardBrand: '' };
                    } else {
                        alert('Erro ao adicionar pagamento. ');
                    }
                },
                
                // método para excluir um pagamento
                async deletePayment(paymentId, paymentType) {
                    if (!confirm('Tem certeza que deseja excluir este pagamento?')) {
                        return; // se o usuário cancelar, a função para aqui
                    }
                    
                    try {
                        // Faz a requisição DELETE para o servidor
                        const response = await fetch(`/Payment/DeletePayment/${paymentId}/${paymentType}`, {
                            method: 'DELETE',
                            headers: {
                                'RequestVerificationToken': this.antiForgeryToken
                            }
                        });
                        
                        if (response.ok) {
                            // Não tocamos no HTML, apenas removemos o pagamento da lista de dados
                            // usamos o método filter para criar uma nova lista sem o pagamento excluído
                            // contendo apenas os pagamentos cujo id é diferente do que foi excluído
                            this.payments = this.payments.filter(p => p.id !== paymentId);
                        } else {
                            alert('Falha ao excluir o pagamento.');
                        }
                    } catch (error) {
                        console.error('Erro na requisição da exclusão:', error);
                        alert('Ocorreu um erro de Conexão.');
                    }
                }
            }
            
        }).mount('#payment-app'); // conecta o Vue ao div com id payment-app
    </script>
} 