@model IEnumerable<ComprovAI.Models.PaymentModeModel>

@{
    ViewData["Title"] = "Lançamentos";
}
<div id="payment-app">
<div class="card shadow-sm p-4 mt-4">
    <div class="row">
        <div class="col-md-6 border-end pe-4">
            <h1>Comprovantes</h1>
        
            <form v-on:submit.prevent="addPayment">
                <div class="mb-2">
                    <label>Valor</label>
                    <input type="number" step="0.01" name="Value" class="form-control" v-model="newPayment.Value" required />
                </div>
                <div class="mb-2">
                    <label>Tipo</label>
                    <select name="Type" class="form-control"  v-model.number="newPayment.Type" required>
                        <option value="">Selecione...</option>
                        <option value="3">Pix</option>
                        <option value="2">Crédito</option>
                        <option value="1">Débito</option>
                    </select> 
                </div>
                <div class="mb-2">
                    <label>Bandeira</label>
                    <select name="CardBrand" class="form-control" v-model.number="newPayment.CardBrand" :disabled="isCardBrandDisabled" required>
                        <option value="">Selecione...</option>
                        <option value="2">Visa</option>
                        <option value="1">Mastercard</option>
                        <option value="3">Elo</option>
                        <option value="4">Amex</option>
                    </select> 
                </div>
                @Html.AntiForgeryToken()
                <button type="submit" class="btn btn-success">Adicionar Pagamento</button>
            </form>
            <div id="result"></div>
        </div>

        <div class="col-md-6 ps-4">
            <div class="card mb-2">
                <h1 class="px-2 text-center"> Total </h1>
                <h1 class="text-center  "><span class="badge  bg-primary text-light">{{ totalAmount }}</span></h1>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Valor</th>
                        <th>Tipo</th>
                        <th>Bandeira</th>
                        <th>Ações</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr v-for="payment in payments" :key="payment.id">
                        <td>{{ payment.Value.toLocaleString('pt-BR', { style: 'currency', 'currency': 'BRL' }) }}</td>
                        <td>{{ payment.Type === 1  ? 'Débito' : (payment.Type === 2 ? 'Crédito' : 'Pix') }}</td>
                        <td>{{ payment.CardBrand ? getCardBrandName(payment.CardBrand) : '' }}</td> <td>
                            <button class="btn btn-sm btn-danger" v-on:click="deletePayment(payment.Id, payment.Type)"> 
                                Excluir
                            </button>
                        </td>
                    </tr>
                    </tbody>

                    <thead>
                    <tr>
                        <th>Total</th>
                    </tr>
                    </thead>
                    <tbody>
                    <tr>
                        <td>@ViewBag.TotalPayments.ToString("C")</td>
                    </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14"></script>
    <script>
        // Script que atualiza a interface com Vue.js
        new Vue({
            el: '#payment-app',
            data: {
                payments: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)),
                newPayment: { Value: null, Type: null, CardBrand: null },
                isCardBrandDisabled: true
            },
            computed: {
                totalAmount() {
                    return this.payments.reduce((sum, payment) => sum + payment.Value, 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                }
            },
            watch: {
                'newPayment.Type'(newType) {
                    this.isCardBrandDisabled = newType !== 1 && newType !== 2;
                    if (this.isCardBrandDisabled) {
                        this.newPayment.CardBrand = null;
                    }
                }
            },
            methods: {
                getCardBrandName(brand) {
                    switch (brand) {
                        case 1: return 'Mastercard';
                        case 2: return 'Visa';
                        case 3: return 'Elo';
                        case 4: return 'Amex';
                        default: return '';
                    }
                },
                
                
                addPayment() {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    fetch('/Payment/AddPayment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify(this.newPayment)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.payments.push(data.payment);
                            this.newPayment = { Value: null, Type: null, CardBrand: null };
                        } else {
                            alert('Erro ao adicionar pagamento.');
                        }
                    });
                },
                deletePayment(id, type) {
                    if (!confirm('Tem certeza que deseja excluir este pagamento?')) return;
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                    fetch(`/Payment/DeletePayment/${id}/${type}`, {
                        method: 'DELETE',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.payments = this.payments.filter(p => p.Id !== id);
                        } else {
                            alert('Erro ao excluir pagamento.');
                        }
                    });
                }
            }
        });
    </script>
}